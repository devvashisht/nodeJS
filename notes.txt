Debugging Node app : 
 - console.log 
- node debugger in chorme
     add debugger  : pause the program
     node inspect app.js --title="coures"
     node --inspect-brk app.js 
     chorme://inspect     // remote target 

 - converted in chormojs devtools sourch: 
        (function(exports, require, module, __filename, __dirname){

        })
- fileSystem :  add folder to workspace
restart
-----------------------------------------------
~ Asynchoronous programming ~
Asynchoronous call are event registered  in nodeapi
-js  Single thread programming  in callstack
- node js uses other thread via c++ behind scene to mangae event 
event loop (callback queue)
evnet loop looks at callstak and callback queue ,once callstack is empty then call back is executed

global : object in nodejs

call stack : node's  main() > log('sum is 3' > removed after execution > main() pop finih)

callback queue : 
event Loop : 
_____________________________________________
~ Making HTtp request ~
weatherstack.com aPi
api access key  : 90e50391e7caa91fd424c03797cf8876
Dashboard

Upgrade
Subscription Plan
Account
Payment
API Usage

Sign Out
3-Step Quickstart Guide

Welcome to the weatherstack API, Dev!
This guide should get you started in a matter of seconds - let's dive right in:

Step 1: Your API Access Key

This is your API Access Key, your personal key required to authenticate with the API.
Keep it safe! You can reset it at any time in your Account Dashboard.

90e50391e7caa91fd424c03797cf8876
Step 2: API Endpoints

There are several API endpoints to choose from:

Current Weather: Get current weather data.

Base URL: API requests start out with the following base URL:
http://api.weatherstack.com/

query parameter : 
baseurl/endpoint?key = value & second key pair

npm request  : http request package

request({url[,option],callbackHandler(error,response)})

defult response  =  response.body

mapbox.com : used in emberjs app as well
mapbox key for dev'account  :  pk.eyJ1IjoiZGV2dmFzaGlzaHQxOTg0IiwiYSI6ImNrYnN2bWdtMDAzeXQyc2xjcHhhNDBiYmoifQ.2r7Dld_bAvNE0XI2Pfsqdg

- low level error:  wrong url, netwrok issu
- service level error: wrong parameter

encodeUri : to handle special character  are encoded

_____________________________________________


raw http and https moudle:
_____________________________________________
Expressjs.com
static or api
web server >  api >  database > email > 
create web server for static or api backend

get to create route
serving static json
send back html packag
send back json
{
serving content for directory
__dirname
__filename
path package

relative path starts with  ./
absolute path starts with /
ususally / woud take you to the root of the hard drive but this is access in the browser
 so it related to webserver root
<link rel="stylesheet" href= "./css/stylesheet.css" 
 
multiple pages same content 
common content 
- partial
}
nodemon app.js -e js,hbs


///////////////////
- WEB API
- query string as a part of url
 ? key = value e.g search = value
 query string available on reqest 
req.query.search

- ----------------
 ~ Integrate api with the website -
 -  client side js has the code that is sevce via public folder-
 - browser FETCH api used ( not in nodejs)


---------------------------
~~~~~~Application deployment Nodejs ~~~~~~~~~~~~~~~
git

github
heroku : php ruby on rail java , node 
github : development platform,npm package hosted, public private
 - github :
Heroku account :  dev.vashisht@gmail.com/ing_feb16
heroku command line tool: heroku login
___________________________--
~~~~~~ GIT  ~~~~~~~~
git-scm.com
pro git :  free
insall git  (git --version)
untracker > add >  stageed
stage > commit >  commit
--------------
intergration GIT:
git init  (untracked)
git status
.gitingnore > node_module/
git add src (folder)or filename or . (all)  < staged>
git commit  < commit>

create repository in github
 git remote add origin repostiroy url
 git push  -u  originmaster
----------------------------------
~~~~SSh~~~~~~~~~~~~~~~
via gitbash: 
- ls -a -l ~/.ssh  list including hidden user directory (~)
ssh-keygen -t rsa -b 4096 -C "dev.vashista@nagarro.com
id_rsa :private
id_rsa.pub : pub

use ssh key next time : 
- eval $(ssh-agent
)
register: ssh-add ~/..ssh/id_rsa

- cat ~/.ssh/id_rsa.pub

Check ssh connection with git hub : ssh -T git@github.com
~~~~~~~~~`Heroku~~~~~~~~~~~~~```
 ~ heroku keys:add
 ~ heroku create vashisht-node-app
  <output> https://vashisht-node-app.herokuapp.com/ | https://git.heroku.com/vashisht-node-app.git
Script : node src/app.js

port proivded by heroku 
relatvive address for heroku

heroku create 
git push heroku webserver:master

_____________________________________________
dask and advanced (mongo db)
- MongoDB 
-          sql vs no sql : 
sql uses table & no sql uses collection
row in sql & no sql document
column in sql vs field in no sql
 - installling mongo db : 
user name on mongo :dev vashihsta
dev.vashisht@gmail.com
-  download mongodb zip from mongodb
launch mongod.exe --mongodeb-data-folder-path <this will launch the server and will wait for the connection

127.0.0.1 port 27017

mongodb admin tool : GUI: robo 3t
configure connection on robo 3t
- db.version()
--------------
connect mongodb from nodejs
npm module driver for mongodb
const mongodb =  require('mongodb')
const MongoClient = mongodb.MongoClient
const connectionURL = 'mongodb://127.0.0.1:27017'
const databaseName = 'task-manager'

MongoClient.connect(connectionURL, {useNewUrlParser: true}, (error, client) =>{
if(error){
   return console.log('Unable to connect to database')
}
console.log("Connection correctly")
const db = client.db(databaseName)
db.collection('users').insert({
    name : 'Dev',
    age : '34'
})

---object id ------------
_id : guid :global unique identifier
- scale well 
- generate object id 

-------------------
~~~~~~~~``Promises~~~~~~~~~~~~~
~~~~~~Mangoosejs.com~~~~~~~
validation, required, type
connect > create model(collection), 
ODM (orm in rdbm)  :  obejct document mapper
npm i mongoose@5.3.16
model to create document/table(rdbm) use save

data validatoin and sanitizatino
custom validator  : validate
 Validator npm package 
 schema type : bufer for image, 

 REST API???????????????
 REpresentational : access and manipulate resourse with pre-definded operatoion
 State: client request independenct ,authenticatin, opertion data
 ____________________________________
 Predefined operation : creatte Post / tasks
 read get/tasks
 read get/ tasks/:id

 update patch tasks/:id

 delete delete/tasks/:id


REQEST HEADER.......
 https rquest :
 post /task http/1.1
 accept : json
 connectin : keep -alive
 authorizatino:sdfdsfssd
Body...........
{fddfsfssdsd}

moonges api-

------------Authentication -----------
secure user password (enrypted)
hashed password: bcryptjs npm package
 MiddleWare :  just before or after run code

 Authentication Token :login will return authentication token
 json web token : JWT

 expiration

library : npm jsonwebtoken
jwt.sign(id,secretkey)
3 part  :  header, datatprovided : singnature
base64decode.org
jwt.verify(token,secretkey)













